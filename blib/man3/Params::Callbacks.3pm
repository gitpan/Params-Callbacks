.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Params::Callbacks 3"
.TH Params::Callbacks 3 "2012-07-01" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Params::Callbacks \- callback helper and topicalizer tools
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # Using the object oriented calling style...
\&
\&    use Params::Callbacks;
\&
\&    sub counted {
\&        my ($callbacks, @args) = Params::Callbacks\->extract(@_);
\&        $callbacks\->filter(@args);
\&    }
\&
\&    my $size = counted 1, 2, 3, sub {
\&        print "> $_\en" for @_;
\&        return @_;
\&    };
\&
\&    print "$size items\en";
\&
\&    # > 1
\&    # > 2
\&    # > 3
\&    # 3 items
\&    
\&    # Or, just mix\-in the "callbacks" function...
\&
\&    use Params::Callbacks qw/callbacks/;
\&
\&    sub counted {
\&        my ($callbacks, @args) = &callbacks;
\&        $callbacks\->filter(@args);
\&    }
\&
\&    my $size = counted \*(AqA\*(Aq, \*(AqB\*(Aq, \*(AqC\*(Aq, sub {
\&        print "> $_\en" for @_;
\&        return @_;
\&    };
\&
\&    print "$size items\en";
\&
\&    # > A
\&    # > B
\&    # > C
\&    # 3 items
\&    
\&    # Or, use my pre\-cooked topicalizer. It\*(Aqs like "map" but with 
\&    # the topic up\-front and in your face instead of further down 
\&    # in the source, somewhere...
\&
\&    use Params::Callbacks qw/:with/;
\&
\&    with { \*(AqA\*(Aq, \*(AqB\*(Aq, \*(AqC\*(Aq } 
\&        item { print "> $_\en" }             # Process each item
\&        list { print @_ . " items\en" };     # Process entire list
\&
\&    # > A
\&    # > B
\&    # > C
\&    # 3 items
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a very simple mechanism for converting an ordinary function into 
a function that will allow its result to be filtered through, and possibly
altered by, an optional callback queue before it is passed the caller.
.SS "\s-1TRAINING\s0 \s-1FUNCTIONS\s0 \s-1TO\s0 \s-1HANDLE\s0 \s-1CALLBACKS\s0"
.IX Subsection "TRAINING FUNCTIONS TO HANDLE CALLBACKS"
.ie n .IP "\fB( \fB$callbacks\fB, \f(BI@params\fB ) = Params::Callbacks\->extract( \f(CB@_\fB );\fR" 5
.el .IP "\fB( \f(CB$callbacks\fB, \f(CB@params\fB ) = Params::Callbacks\->extract( \f(CB@_\fB );\fR" 5
.IX Item "( $callbacks, @params ) = Params::Callbacks->extract( @_ );"
.PD 0
.ie n .IP "\fB( \fB$callbacks\fB, \f(BI@params\fB ) = callbacks( \f(CB@_\fB );\fR" 5
.el .IP "\fB( \f(CB$callbacks\fB, \f(CB@params\fB ) = callbacks( \f(CB@_\fB );\fR" 5
.IX Item "( $callbacks, @params ) = callbacks( @_ );"
.ie n .IP "\fB( \fB$callbacks\fB, \f(BI@params\fB ) = &callbacks;\fR" 5
.el .IP "\fB( \f(CB$callbacks\fB, \f(CB@params\fB ) = &callbacks;\fR" 5
.IX Item "( $callbacks, @params ) = &callbacks;"
.PD
Takes a list (here it is \f(CW@_\fR) and creates a callback queue (\f(CW$callbacks\fR)
from any \fBtrailing\fR code references and/or anonymous subs in that list. A 
new list is returned containing a reference to the callback queue followed 
by all those items in the original list that were not callbacks.
.Sp
For purposes of illustration, I'm using Perl's built-in \f(CW@_\fR, which is 
probably typical given the nature of the task at hand. Nevertheless, any 
list may be processed; though, prefixing the \f(CW\*(C`callbacks\*(C'\fR function call 
with an ampersand \*(L"&\*(R" is probably only relevant when working with \f(CW@_\fR.
.Sp
A callback queue may be empty, i.e. contain no callbacks. That's ok.
.ie n .IP "\fB\s-1OUTPUT\s0 = \fB$callbacks\fB\->filter( [\s-1INPUT\s0] );\fR" 5
.el .IP "\fB\s-1OUTPUT\s0 = \f(CB$callbacks\fB\->filter( [\s-1INPUT\s0] );\fR" 5
.IX Item "OUTPUT = $callbacks->filter( [INPUT] );"
Passes a \*(L"would be\*(R" result (\f(CW\*(C`INPUT\*(C'\fR) into the head of the callback queue. 
The final stage of the queue yields the final result (\f(CW\*(C`OUTPUT\*(C'\fR). Both, 
\&\f(CW\*(C`INPUT\*(C'\fR and \f(CW\*(C`OUTPUT\*(C'\fR may be lists of zero, one or more scalars. Passing 
no arguments to the \f(CW\*(C`filter\*(C'\fR method causes \f(CW$_\fR to be used.
.Sp
An empty callback queue yields the same result that was passed into it.
.ie n .SS "\s-1USING\s0 \s-1THE\s0 ""with"" \s-1TOPICALIZER\s0 \s-1AND\s0 \s-1THE\s0 ""item"" / ""list"" \s-1STAGES\s0"
.el .SS "\s-1USING\s0 \s-1THE\s0 \f(CWwith\fP \s-1TOPICALIZER\s0 \s-1AND\s0 \s-1THE\s0 \f(CWitem\fP / \f(CWlist\fP \s-1STAGES\s0"
.IX Subsection "USING THE with TOPICALIZER AND THE item / list STAGES"
.ie n .IP """[RESULT = ]with BLOCK [STAGE [STAGE [STAGE [...]]]]""" 5
.el .IP "\f(CW[RESULT = ]with BLOCK [STAGE [STAGE [STAGE [...]]]]\fR" 5
.IX Item "[RESULT = ]with BLOCK [STAGE [STAGE [STAGE [...]]]]"
The \f(CW\*(C`with\*(C'\fR function takes a \s-1BLOCK\s0 as its first argument, which may be
followed by zero or more stages. Each stage may be a per-item-oriented
\&\f(CW\*(C`item BLOCK\*(C'\fR stage, or the list-oriented \f(CW\*(C`list BLOCK\*(C'\fR and \f(CW\*(C`sub BLOCK\*(C'\fR
stages.
.Sp
Per-item-oriented stages process the result of the previous stage on 
item at a time, i.e. if the previous stage issued a list, each item 
in that list is processed separately. List-oriented stages process 
the entire result from the previous stage; if the previous stage is
an item-oriented stage then all the results are gathered together 
before being passed on. So, \f(CW\*(C`item\*(C'\fR and \f(CW\*(C`list\*(C'\fR stages can be mixed
freely.
.Sp
The \f(CW\*(C`sub BLOCK\*(C'\fR stage works just like the \f(CW\*(C`list BLOCK\*(C'\fR stage, but
requires a comma to separate it from anything that follows. If that's
too much ugly, just use \f(CW\*(C`list BLOCK\*(C'\fR.
.Sp
Essentially, you end up with something looking like this:
.Sp
.Vb 5
\&    with { ... }
\&        item { ... }
\&        list { ... }
\&        # etc
\&    ;
.Ve
.Sp
It's a beautiful structure, allowing the developer to constrain 
logic and temporary state within an inner block and away from
the main flow, and process the results in a similar fashion.
.Sp
Sure, we have \f(CW\*(C`map\*(C'\fR and \f(CW\*(C`grep\*(C'\fR but they're back-to-front and 
sometimes that just doesn't look right.
.SH "EXPORTS"
.IX Header "EXPORTS"
.ie n .SS "@EXPORT"
.el .SS "\f(CW@EXPORT\fP"
.IX Subsection "@EXPORT"
None.
.ie n .SS "@EXPORT_OK"
.el .SS "\f(CW@EXPORT_OK\fP"
.IX Subsection "@EXPORT_OK"
callbacks, with, list, item.
.ie n .SS "%EXPORT_TAGS"
.el .SS "\f(CW%EXPORT_TAGS\fP"
.IX Subsection "%EXPORT_TAGS"
.ie n .IP """:all""" 4
.el .IP "\f(CW:all\fR" 4
.IX Item ":all"
Everything in \f(CW@EXPORT_OK\fR.
.ie n .IP """:with""" 4
.el .IP "\f(CW:with\fR" 4
.IX Item ":with"
with, list, item.
.SH "BUGS AND FEATURE REQUESTS"
.IX Header "BUGS AND FEATURE REQUESTS"
Too many features; not enough bugs? Just drop me a line and I'll see what
I can do to help.
.SH "AUTHOR"
.IX Header "AUTHOR"
Iain Campbell <cpanic@cpan.org>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
Copyright (C) 2012 by Iain Campbell
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.2 or,
at your option, any later version of Perl 5 you may have available.
